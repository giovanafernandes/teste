class NewJob extends React.Component {

    constructor(props)
    {
        super(props);
        this.state = {
            isNotAbleToSubmit: true,
            salary: "",
            formFields: {}
        }
    }

    renderJobs()
    {
        var jobs = this.props.jobs.map(job => {
            return (
                <div className="form-group row divider" key={job.id}>
                    <div className="col-8 container">
                        <div className="form-group row">
                            <div className="col">
                                <input type="text" className="form-control no-border" value={job.description}/>
                            </div>
                        </div>
                        <div className="form-group row" style={{marginTop: -15}}>
                            <div className="col-5">
                                <input className="form-control small-textfield" placeholder=" Nome" type="text" name="employee[name]" id="employee_name" value={"R$ " + job.salary}/>
                            </div>
                            <div className="col-1" style={{marginTop: -3}}>
                                <label className="switch-small form-control-label">
                                    <input name="job[third]" type="hidden" value="0" />
                                    <input id="job_third" className="boolean optional" type="checkbox" value="1" name="job[third]" checked={job.third}/>
                                    <span className="slider slider-small round"></span>
                                </label>
                            </div>
                            <div className="col-1 switch-header form-control-label">
                                Terceiro
                            </div>
                        </div>
                    </div>
                    <div className="col-4 container">
                        <div className="form-group row">
                            <div className="col" style={{margin: 6}}>
                                <span className="close">
                                    <img src={"<%= image_url('edit.svg') %>"} width="13" />
                                </span>
                            </div>
                            <div className="col" style={{margin: 7}}>
                                <span className="close">
                                    &times;
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            );
        });

        return jobs;
    }

    handleFormSubmit(e)
    {
        var description = this.state.formFields.description.value;
        var salary = this.state.formFields.salary.value;
        var third = this.state.formFields.third.checked;
        e.preventDefault();
        e.target.reset();
        this.setState({salary: ""});
        let body = JSON.stringify({job: {description: description, salary: salary, third: Number(third), branch_id: this.props.branch_id} })
        fetch("/api/v1/jobs", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: body,
        }).then((response) => {
            return response.json()
        }).then((job) => {
            this.props.addNewJob(job)
        }).catch(error => {
            console.log(error);
        })
    }

    handleSubmitAction()
    {
        var description = this.state.formFields.description.value;
        var salary = this.state.formFields.salary.value;

        var isNotItAble = false
        if(!description || description == undefined || description == "" || description.length == 0
            || !salary || salary == undefined || salary == "" || salary.length == 0)
        {
            isNotItAble = true
        }

        this.setState({
            isNotAbleToSubmit: isNotItAble
        });
    }

    setSalary(value)
    {
        this.setState({
            salary: this.formatCurrency(value)
        })
    }

    formatCurrency(value)
    {
        var currency = value.replace(",","");
        currency = currency.replace(".","");

        currency = (parseFloat(currency)/100).toFixed(2);
        currency = currency.toString()

        return currency
    }

    render() {
        if(!this.props.show) {
          return null;
        }

        return (
            <div className="modal_window">
              <div className="modal_content">
                <form className="simple_form new_job" onSubmit={(e) =>
                        this.handleFormSubmit(e)} id="new_job" acceptCharset="UTF-8">
                    <input name="utf8" type="hidden" value="✓" />
                    <input type="hidden" name="authenticity_token" value="KmjAU/Cz5oocAY9AsrFBeT4f+PKABl2ubDp4QAEV5/p3xNYsJntoF+7pBw3+DeyuGVTlY1zYDW+9ozxEwfK8EA==" />
                    <span className="close" onClick={this.props.onClose}>&times;</span>
                    <p className="default-font">Criar Função</p>
                    <hr />
                    <div className="container">
                        <div className="form-group row">
                            <div className="col-12">
                                <input className="form-control textfield-plusing"
                                ref={input => this.state.formFields.description = input}
                                onChange={() => this.handleSubmitAction()}
                                placeholder=" Função" type="text" name="job[description]" id="job_description" />
                            </div>
                        </div>
                        <div className="form-group row">
                            <CurrencyField
                                reference={input => this.state.formFields.salary = input}
                                key={this.state.formFields.salary}
                                handleSubmitAction={this.handleSubmitAction.bind(this)}
                                setSalary={this.setSalary.bind(this)}
                                salary={this.state.salary}
                                placeholder=" Salário"
                                name="job[salary]"
                                id="job_salary"
                            />
                        </div>
                        <div className="form-group row">
                            <div className="col-2">
                                <label className="switch form-control-label">
                                    <input id="job_third" ref={input => this.state.formFields.third = input} className="boolean optional" type="checkbox" name="job[third]"/>
                                    <span className="slider round"></span><br />
                                    Terceiro
                                </label>
                            </div>
                            <div className="col-4 offset-6">
                                <input type="submit" name="commit" value="Salvar" className="btn btn-plusing success card-action" disabled={this.state.isNotAbleToSubmit}/>
                            </div>
                        </div>
                    </div>
                </form>
                <p className="default-font">Funções</p>
                <hr />
                <div className="container">
                    <div className="form-group row">
                        <div className="input-group col-12">
                          <input type="text" placeholder=" Procurar função" className="form-control textfield-plusing" style={{boxShadow: 'none'}}/>
                          <div className="input-group-append">
                            <span className="input-group-text">
                                <img src={"<%= image_url('search.svg') %>"} width="20" />
                            </span>
                          </div>
                        </div>
                    </div>
                    <div className="scroll-window">
                        { this.renderJobs() }
                    </div>
                </div>
              </div>
            </div>
        );
    }
}

NewJob.propTypes = {
  onClose: PropTypes.func.isRequired,
  show: PropTypes.bool,
  jobs: PropTypes.array,
  children: PropTypes.node
};
